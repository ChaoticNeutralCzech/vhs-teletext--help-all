#!/usr/bin/env python

# * Copyright 2016 Alistair Buxton <a.j.buxton@gmail.com>
# *
# * License: This program is free software; you can redistribute it and/or
# * modify it under the terms of the GNU General Public License as published
# * by the Free Software Foundation; either version 3 of the License, or (at
# * your option) any later version. This program is distributed in the hope
# * that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# * GNU General Public License for more details.

import sys
import argparse
import importlib

from teletext.vbi.map import raw_line_map
from teletext.vbi.pattern import Pattern
from teletext.vbi.line import Line

from teletext.t42.printer import do_print

parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument('inputfile', type=str, help='Read VBI samples from this file.')
group = parser.add_mutually_exclusive_group()
group.add_argument('-a', '--ansi', help='Output lines in ANSI format suitable for console display. Default if STDOUT is a tty.', action='store_true')
group.add_argument('-t', '--t42', help='Output lines in T42 format for further processing. Default if STDOUT is not a tty.', action='store_true')

parser.add_argument('-r', '--rows', type=int, metavar='R', nargs='+', help='Only attempt to deconvolve lines from these rows.', default=None)
parser.add_argument('-m', '--mags', type=int, metavar='M', nargs='+', help='Only attempt to deconvolve lines from these magazines.', default=None)
parser.add_argument('-n', '--numbered', help='When output is ansi, number the lines according to position in input file.', action='store_true')
parser.add_argument('-c', '--config', help='Configuration. Default bt8x8_pal.', default='bt8x8_pal')
parser.add_argument('-e', '--extra-roll', metavar='SAMPLES', type=int, help='Extra roll.', default=3)
parser.add_argument('-H', '--headers', help='Synonym for --ansi --numbered --rows 0 31.', action='store_true')
parser.add_argument('-C', '--force-cpu', help='Disable CUDA even if it is available.', action='store_true')
parser.add_argument('-T', '--threads', type=int, help='Number of CPU worker threads. Default 1.', default=1)

parser.add_argument('--start', type=int, metavar='N', help='Start after the Nth line of the input file.', default=0)
group = parser.add_mutually_exclusive_group()
group.add_argument('--stop', type=int, metavar='N', help='Stop before the Nth line of the input file.', default=-1)
group.add_argument('--count', type=int, metavar='N', help='Stop after processing N lines from the input file.', default=-1)


args = parser.parse_args()

if not args.t42 and not args.ansi:
    if sys.stdout.isatty():
        args.ansi = True
    else:
        args.t42 = True

if args.stop == -1 and args.count > -1:
    args.stop = args.start + args.count

if args.headers:
    args.ansi = True
    args.t42 = False
    args.numbered = True
    args.rows = set([0,31])

try:
    config = importlib.import_module('config_'+args.config)
except ImportError:
    sys.stderr.write('No configuration file for '+args.config+'.\n')

Line.set_config(config)


cuda_enabled = False

if not args.force_cpu:
  try:
    from teletext.vbi.patterncuda import PatternCUDA
    pg = PatternCUDA('parity_patterns')
    cuda_enabled = True
  except:
    sys.stderr.write('CUDA init failed, using CPU deconvolution.\n')


if cuda_enabled:

    def doit(rl):
        l = Line(rl)
        if l.is_teletext:
            l.roll(args.extra_roll)
            l.bits()
            l.mrag()
        return l

    def find_other_bits_gpu(l):
        matches = pg.match(l.bits_array[36:362])
        for b in range(40):
            l.bytes_array[b+2] = pg.bytes[matches[b]]

else:

    def doit(rl):
        l = Line(rl)
        if l.is_teletext:
            l.roll(args.extra_roll)
            l.bits()
            l.mrag()
            if args.mags is None or l.magazine in args.mags:
                if args.rows is None or l.row in args.rows:
                    l.bytes()
        return l


for l in raw_line_map(sys.argv[1], config.line_length, doit, start=args.start, stop=args.stop, threads=args.threads, show_speed=True):
    if args.mags is None or l.magazine in args.mags:
        if args.rows is None or l.row in args.rows:
            if cuda_enabled:
                find_other_bits_gpu(l)
            if args.t42:
                l.bytes_array.tofile(sys.stdout)
            elif args.ansi:
                if args.numbered:
                    sys.stdout.write(('%8d ' % l.offset))
                sys.stdout.write(do_print(l.bytes_array) + '\n')
