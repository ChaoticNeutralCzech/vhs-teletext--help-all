#!/usr/bin/env python3

import datetime
import socket

import click
import cv2
import srt

from teletext.cli.clihelpers import packetwriter
from teletext.subpage import Subpage


@click.command()
@click.argument('videofile', type=click.Path(readable=True))
@click.option('-s', '--subs', type=click.File('r'), help="Subtitle file (srt)")
@click.option('--start', type=int, default=0, help="Start at frame N")
@click.option('--end', type=int, default=None, help="End at frame N")
@packetwriter
def video(videofile, subs, start, end):
    """
    Converts a video into a page stream. Also supports SRT subtitles.
    Can set a start and end position in frames. Also works with images
    because OpenCV treats them as videos with one frame.
    """
    hostname = socket.gethostname()[:12]

    # Set up page
    page = Subpage(prefill=True, magazine=1)
    page.header.control = 1<<4
    page.header.page = 0
    # init fastext so we can use row 24
    page.init_packet(27, magazine=1)
    page.packet(27).fastext.dc = 0
    page.packet(27).fastext.control = 0xf

    # Creating a VideoCapture object to read the video
    cap = cv2.VideoCapture(videofile)
    cap.set(cv2.CAP_PROP_POS_FRAMES, start)
    fps = cap.get(cv2.CAP_PROP_FPS)
    frameno = start

    sub = None
    if subs:
        subs = srt.parse(subs.read())
        sub = next(subs)

    # Loop until the end of the video
    while (cap.isOpened() and (end is None or frameno <= end)):
        # Capture frame-by-frame
        ret, frame = cap.read()
        if not ret: # eof
            break

        frameno += 1

        frame = cv2.resize(frame, (39*2, 24*3), fx = 0, fy = 0,
                             interpolation = cv2.INTER_CUBIC)

        # conversion of BGR to grayscale is necessary to apply this operation
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

        # adaptive thresholding to use different threshold
        # values on different regions of the frame.
        thresha = cv2.adaptiveThreshold(gray, 1, cv2.ADAPTIVE_THRESH_MEAN_C,
                                               cv2.THRESH_BINARY, 3, 2)
        threshb = cv2.threshold(gray, 16, 255, cv2.THRESH_BINARY)[1]
        thresh = (thresha * threshb) > 0

        dt = datetime.datetime.now().strftime(" %a %d %b\x03%H:%M/%S")
        page.header.displayable.place_string('%-12s' % (hostname) + dt)
        page.displayable.place_bitmap(thresh)

        if sub:
            seconds = datetime.timedelta(seconds = frameno / fps)
            try:
                while seconds > sub.end:
                    sub = next(subs)
                if sub and seconds >= sub.start:
                    x = sub.content.split('\n')
                    w = len(max(x, key=len))
                    o = max(min(38 - w, 2), 0)
                    for n, l in enumerate(x):
                        page.packet(n+21).displayable.place_string(('\x06' + l + '\x17')[:(40-o)], x=o)
            except StopIteration:
                sub = None

        yield from page.packets

    # release the video capture object
    cap.release()

if __name__ == '__main__':
    video()
