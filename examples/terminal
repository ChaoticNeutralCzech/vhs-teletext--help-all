#!/usr/bin/env python3

import datetime
import os
import pty
import select
import shlex
import time

import click
import pyte

from teletext.cli.clihelpers import packetwriter
from teletext.subpage import Subpage


@click.command()
@click.argument("command", type=str)
@packetwriter
def terminal(command):
    """
    Runs a command in a simulated terminal and outputs a packet stream on page 100.
    """
    columns, lines = 40, 24

    # run the command
    p_pid, p_fd = pty.fork()
    if p_pid == 0:  # Child.
        argv = shlex.split(command)
        env = dict(TERM="linux", LC_ALL="en_GB.UTF-8",
                   COLUMNS=str(columns), LINES=str(lines))
        os.execvpe(argv[0], argv, env)

    # set up virtual terminal
    screen = pyte.Screen(columns, lines)
    screen.set_mode(pyte.modes.LNM)
    screen.write_process_input = lambda data: p_fd.write(data.encode())
    stream = pyte.ByteStream()
    stream.attach(screen)

    # set up page
    page = Subpage(prefill=True, magazine=1)
    page.header.control = 1<<4
    page.header.page = 0
    # init fastext so we can use row 24
    page.init_packet(27, magazine=1)
    page.packet(27).fastext.dc = 0
    page.packet(27).fastext.control = 0xf

    # generation loop
    prev_refresh = time.time()
    try:
        while True:
            r, w, x = select.select([p_fd], [], [], 1.0)
            if p_fd in r:
                stream.feed(os.read(p_fd, 65536))

            dt = datetime.datetime.now().strftime(" %a %d %b\x03%H:%M/%S")
            page.header.displayable.place_string('%-12s' % (command[:12]) + dt)

            for y in screen.dirty:
                line = screen.buffer[y]
                data = ''.join(char.data for char in (line[x] for x in range(screen.columns)))
                page.packet(y+1).displayable.place_string(data)

            now = time.time()
            elapsed = now - prev_refresh
            if elapsed > 1.0:
                prev_refresh = now
                send_lines = range(lines)
            else:
                send_lines = screen.dirty

            yield page.packet(0)
            for y in send_lines:
                yield page.packet(y+1)
            yield page.packet(27)

            screen.dirty.clear()
    except OSError:
        pass


if __name__ == '__main__':
    terminal()
