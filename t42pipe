#!/usr/bin/env python

# * Copyright 2016 Alistair Buxton <a.j.buxton@gmail.com>
# *
# * License: This program is free software; you can redistribute it and/or
# * modify it under the terms of the GNU General Public License as published
# * by the Free Software Foundation; either version 3 of the License, or (at
# * your option) any later version. This program is distributed in the hope
# * that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# * GNU General Public License for more details.

import sys
import argparse
import itertools
import errno

from teletext.t42.pipeline import reader, demux, paginate
from teletext.t42.printer import print_iter

parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument('inputfile', type=str, help='Read VBI samples from this file.')
group = parser.add_mutually_exclusive_group()
group.add_argument('-a', '--ansi', help='Output lines in ANSI format suitable for console display. Default if STDOUT is a tty.', action='store_true')
group.add_argument('-t', '--t42', help='Output lines in T42 format for further processing. Default if STDOUT is not a tty.', action='store_true')

parser.add_argument('-r', '--rows', type=int, metavar='R', nargs='+', help='Only pass packets from these rows.', default=None)
parser.add_argument('-m', '--mags', type=int, metavar='M', nargs='+', help='Only pass packets from these magazines.', default=None)
parser.add_argument('-P', '--paginate', help='Re-order output lines so pages are continuous.', action='store_true')

parser.add_argument('-H', '--headers', help='Synonym for --rows 0 31.', action='store_true')

parser.add_argument('-W', '--windowed', help='Output in a separate window.', action='store_true')
parser.add_argument('-L', '--less', help='Page the output with less.', action='store_true')


args = parser.parse_args()

if not args.t42 and not args.ansi:
    if sys.stdout.isatty():
        args.ansi = True
    else:
        args.t42 = True

if args.headers:
    args.rows = set([0,31])


if args.windowed or args.less:
    import teletext.misc.terminal as term
    if args.windowed:
        term.change_terminal(term.urxvt('Teletext', ['-geometry', '67x32', '+sb', '-fg', 'white', '-bg', 'black', '-fn', 'teletext']))
        if args.less:
            term.less()
    else:
        if args.less:
            term.less(['-F'])

infile = open(args.inputfile, 'rb')

line_iter = demux(reader(infile), magazines=args.mags, rows=args.rows)

if args.paginate:
    line_iter = paginate(line_iter)

#if args.ansi:
line_iter = print_iter(line_iter, '\n')
#else:
#    import numpy
#    line_iter = itertools.imap(line_iter, numpy.tostring)

for l in line_iter:
    sys.stdout.write(l)
